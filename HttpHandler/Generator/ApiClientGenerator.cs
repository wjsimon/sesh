using Microsoft.AspNetCore.Mvc;
using System.Reflection;
using System.Text;

namespace SSHC.Generator
{
    public static class ApiClientGenerator
    {
        private const string TEMPLATE_CONTROLLER = "[controller]";
        private const string ROUTE_CONTROLLER = "Controller";
        public static void Generate(Assembly controllerAssembly) 
        {
            //get all controllers to be generate
            //do them step-by-step
            var types = GetAutoGeneratedControllerTypes(controllerAssembly);
            foreach (var type in types)
            {
                Generate(type);
            }
        }

        private static void Generate(Type type)
        {
            Console.WriteLine($"Generating ApiClient for {type.FullName}...");
            if (!IsValidAnnotatedApiController(type)) 
            {
                Console.WriteLine($"{type.Name} is not an AspNetCore.ApiController. Cannot generate ApiClient");
                return;
            }

            string controllerName = GetControllerRoute(type);
            string fileName = $"{controllerName}ApiClient.cs";

            foreach (var method in GetAllApiMethodsFromController(type))
            {
                StringBuilder sb = new StringBuilder();
                sb.Append($"{method.Name}:");

                Console.WriteLine(sb.ToString());
            }

            Console.WriteLine($"ApiClient for {type.FullName} has been generated at: {fileName}");
        }

        private static IEnumerable<Type> GetAutoGeneratedControllerTypes(Assembly assembly)
        {
            foreach (Type type in assembly.GetTypes())
            {
                if (type.IsDefined(typeof(AutoGenerateApiClientAttribute)))
                {
                    yield return type;
                }
            }
        }

        private static bool IsValidAnnotatedApiController(Type autogeneratableType)
        {
            bool isApiController = autogeneratableType.IsDefined(typeof(ApiControllerAttribute));
            bool hasRoute = autogeneratableType.IsDefined(typeof(RouteAttribute));

            return isApiController && hasRoute;
        }

        private static string GetControllerRoute(Type controllerType) 
        {
            string template = controllerType.GetCustomAttribute<RouteAttribute>().Template;
            return ParseRouteTemplate(controllerType, template);
        }

        private static string ParseRouteTemplate(Type controllerType, string template)
        {
            var controllerName = template.Split("/")[0];
            if (controllerName == TEMPLATE_CONTROLLER)
            {
                controllerName = controllerType.Name.Replace(ROUTE_CONTROLLER, "");
            }

            return controllerName;
        }

        private static IEnumerable<MethodInfo> GetAllApiMethodsFromController(Type controllerType)
        {
            var all = controllerType.GetMethods().Where(m => IsValidAnnotatedApiMethod(m));
            return all;
        }

        private static bool IsValidAnnotatedApiMethod(MethodInfo method)
        {
            bool valid =
                method.IsDefined(typeof(HttpGetAttribute)) ||
                method.IsDefined(typeof(HttpPostAttribute));

            return valid;
        }

        private static string GetControllerMethodName(MethodInfo controllerMethod)
        {
            //if method has a different name in its attribute, return that one instead
            return controllerMethod.Name;
        }

//        var testMethods = from assembly in assemblies
//                          from type in assembly.GetTypes()
//                          from method in type.GetMethods()
//                          where method.IsDefined(typeof(TestMethodAttribute))
//                          select method;

//foreach (var method in testMethods)
//{
//    Console.WriteLine(method);
//}
    }
}
