using Microsoft.AspNetCore.Mvc;
using System.Reflection;

namespace SSHC.Generator
{
    internal static class ControllerInformationCollector
    {
        private const string TEMPLATE_CONTROLLER = "[controller]";
        private const string ROUTE_CONTROLLER = "Controller";

        public static IEnumerable<AutogenerationInformation?> Collect(Assembly assembly)
        {
            var types = GetAutoGeneratedControllerTypes(assembly);
            foreach (var type in types)
            {
                yield return CollectController(type);
            }
        }

        private static AutogenerationInformation? CollectController(Type type)
        {
            Console.WriteLine($"Collecting information on ApiClient for {type.FullName}...");
            if (!IsValidAnnotatedApiController(type))
            {
                Console.WriteLine($"{type.Name} is not an AspNetCore.ApiController. Cannot generate ApiClient");
                return null;
            }

            var info = new AutogenerationInformation()
            {
                ControllerName = type.Name,
                ControllerRoute = GetControllerRoute(type),
            };

            info.Methods = CollectMethods(type, info).ToList();

            Console.WriteLine($"Information on {info.ControllerName} has been collected...");
            return info;
        }

        private static IEnumerable<AutogenerationMethodInformation> CollectMethods(Type type, AutogenerationInformation info)
        {
            foreach (var method in GetAllApiMethodsFromController(type))
            {
                var methodInfo = new AutogenerationMethodInformation();
                methodInfo.MethodName = GetControllerMethodName(method);
                methodInfo.ParametersMetaData = GetControllerMethodParameters(method);
                methodInfo.ReturnType = GetControllerMethodReturnType(method);
                yield return methodInfo;
            }
        }

        public static IEnumerable<Type> GetAutoGeneratedControllerTypes(Assembly assembly)
        {
            foreach (Type type in assembly.GetTypes())
            {
                if (type.IsDefined(typeof(AutoGenerateApiClientAttribute)))
                {
                    yield return type;
                }
            }
        }

        private static bool IsValidAnnotatedApiController(Type autogeneratableType)
        {
            bool isApiController = autogeneratableType.IsDefined(typeof(ApiControllerAttribute));
            bool hasRoute = autogeneratableType.IsDefined(typeof(RouteAttribute));

            return isApiController && hasRoute;
        }

        private static string GetControllerRoute(Type controllerType)
        {
            string template = controllerType.GetCustomAttribute<RouteAttribute>()!.Template;
            return ParseRouteTemplate(controllerType, template);
        }

        private static string ParseRouteTemplate(Type controllerType, string template)
        {
            var controllerName = template.Split("/")[0];
            if (controllerName == TEMPLATE_CONTROLLER)
            {
                controllerName = controllerType.Name.Replace(ROUTE_CONTROLLER, "");
            }

            return controllerName;
        }

        private static IEnumerable<MethodInfo> GetAllApiMethodsFromController(Type controllerType)
        {
            var all = controllerType.GetMethods().Where(IsValidAnnotatedApiMethod);
            return all;
        }

        private static bool IsValidAnnotatedApiMethod(MethodInfo method)
        {
            bool valid =
                method.IsDefined(typeof(HttpGetAttribute)) ||
                method.IsDefined(typeof(HttpPostAttribute));

            valid &= method.IsDefined(typeof(ReturnsAttribute));

            return valid;
        }

        private static string GetControllerMethodName(MethodInfo controllerMethod)
        {
            //if method has a different name in its attribute, return that one instead
            var get = controllerMethod.GetCustomAttribute<HttpGetAttribute>();
            var post = controllerMethod.GetCustomAttribute<HttpPostAttribute>();

            if (get is not null && !string.IsNullOrEmpty(get.Template)) { return get.Template; }
            else if (post is not null && !string.IsNullOrEmpty(post.Template)) { return post.Template; }

            return controllerMethod.Name; //never gets here
        }

        private static Dictionary<Type, string> GetControllerMethodParameters(MethodInfo controllerMethod)
        {
            var parameters = controllerMethod.GetParameters().Where(p => 
                p.IsDefined(typeof(FromQueryAttribute)) || 
                p.IsDefined(typeof(FromBodyAttribute))
            );

            if (!parameters.Any()) { return new(); }

            var paramDict = new Dictionary<Type, string>();
            foreach (var param in parameters.Where(p => !string.IsNullOrEmpty(p.Name)))
            {
                paramDict.Add(param.ParameterType, param.Name!);
            }

            return paramDict;
        }

        private static Type GetControllerMethodReturnType(MethodInfo controllerMethod)
        {
            var returns = controllerMethod.GetCustomAttribute<ReturnsAttribute>();
            return returns!.ReturnType;
        }
    }
}
